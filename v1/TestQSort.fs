\ TestQSort.fs

INCLUDE QSort.fs

: EQUALS ( n1,n2 -- f with message if false )
    2DUP <> IF ." EXPECTED:" . ." BUT WAS:" . FALSE
    ELSE 2DROP TRUE THEN ;
    
: TEST-EQUALS
    ASSERT( 2 2 + 4 EQUALS ) ;

: TEST-MID
    ASSERT( HERE DUP 10 CELLS + MID HERE 5 CELLS + EQUALS ) 
    ASSERT( HERE DUP 1  CELLS + MID HERE 0 CELLS + EQUALS )
    ASSERT( HERE DUP 2  CELLS + MID HERE 1 CELLS + EQUALS ) ;

CREATE ARRAY 4807 ,   23 ,  110 , 2367 ,  365 , 
               12 , 9920 ,  876 ,    5 , 3402 ,
             2644 ,  110 ,    0 , 9999 ,  456 ,
             8463 ,   76 ,  823 ,   19 ,   47 ,

: TEST-EXCHANGE 
    ASSERT( ARRAY 0 CELLS + ARRAY 1 CELLS + EXCHANGE
            ARRAY 0 CELLS + @ 23   EQUALS 
            ARRAY 1 CELLS + @ 4807 EQUALS AND ) ;

: .ARRAY 20 0 DO ARRAY I CELLS + @ . LOOP ;

: TEST-PARTITION
  ARRAY 10 CELLS + @
  ARRAY DUP 20 CELLS + CELL- PARTITION 2DROP 2DROP
  ARRAY DUP 10 CELLS + SWAP DO I @ OVER ASSERT( < ) CELL +LOOP  
  ARRAY DUP 20 CELLS + SWAP 15 CELLS + DO
     I @ OVER ASSERT( > ) CELL +LOOP
  DROP
;
    
: TEST-QSORT
    ARRAY DUP 19 CELLS + QSORT
    ARRAY DUP 19 CELLS + SWAP DO
        I @ I CELL+ @ ASSERT( <= ) CELL +LOOP
;

: TEST-SORT
    ARRAY 1 SORT
    ARRAY 20 SORT
    ARRAY DUP 19 CELLS + SWAP DO
        I @ I CELL+ @ ASSERT( <= ) CELL +LOOP ;

CREATE SRC 6 ALLOT
CREATE DST 6 ALLOT

: IND-INF ( adr,adr' -- f )
    SWAP C@ SWAP C@ < ;
' IND-INF IS INF

CREATE C-ARRAY
: TEST-ALT-INF
    S" FooBar" SRC SWAP CMOVE
    6 0 DO SRC I + C-ARRAY I CELLS + ! LOOP
    C-ARRAY 6 SORT
    6 0 DO C-ARRAY I CELLS + @ C@ DST I + C! LOOP
    S" BFaoor" DST 6 ASSERT( COMPARE 0 EQUALS )
;

CREATE A 0 , 5 , 12 , 34 , 75 ,

: TEST-LOOKUP-IN-EMPTY-ARRAY
    256 A 0 LOOK-UP ASSERT( FALSE EQUALS ) ;
    
: TEST-LOOKUP-IN-1-ITEM-ARRAY
    0 A 1 LOOK-UP ASSERT( A EQUALS )
    3 A 1 LOOK-UP ASSERT( FALSE EQUALS ) ;

: TEST-LOOKUP-IN-2-ITEM-ARRAY
    0 A 2 LOOK-UP ASSERT( A EQUALS ) 
    5 A 2 LOOK-UP ASSERT( A CELL+ EQUALS )
    7 A 2 LOOK-UP ASSERT( FALSE EQUALS ) 
    -1 A 2 LOOK-UP ASSERT( FALSE EQUALS ) 
    3 A 2 LOOK-UP ASSERT( FALSE EQUALS ) 
;
: TEST-LOOKUP-IN-3-ITEM-ARRAY
    5 A 3 LOOK-UP ASSERT( A CELL+ EQUALS ) 
    0 A 3 LOOK-UP ASSERT( A EQUALS ) 
    12 A 3 LOOK-UP ASSERT( A CELL+ CELL+ EQUALS ) 
    -1 A 3 LOOK-UP ASSERT( FALSE EQUALS )
    1 A 3 LOOK-UP ASSERT( FALSE EQUALS )
    4 A 3 LOOK-UP ASSERT( FALSE EQUALS )
    7 A 3 LOOK-UP ASSERT( FALSE EQUALS )
    17 A 3 LOOK-UP ASSERT( FALSE EQUALS )
;
: TEST-LOOKUP-IN-4-ITEM-ARRAY
    5 A 4 LOOK-UP ASSERT( A CELL+ EQUALS ) 
    0 A 4 LOOK-UP ASSERT( A EQUALS ) 
    12 A 4 LOOK-UP ASSERT( A CELL+ CELL+ EQUALS ) 
    -1 A 4 LOOK-UP ASSERT( FALSE EQUALS )
    1 A 4 LOOK-UP ASSERT( FALSE EQUALS )
    4 A 4 LOOK-UP ASSERT( FALSE EQUALS )
    7 A 4 LOOK-UP ASSERT( FALSE EQUALS )
    17 A 4 LOOK-UP ASSERT( FALSE EQUALS )
    34 A 4 LOOK-UP ASSERT( A 3 CELLS + EQUALS )
    
;

CREATE B CHAR A C, CHAR B C, CHAR C C, CHAR D C,
CREATE C B , B 1 + , B 2 + , B 3 + ,    

: IND-CMP ( adr,elem -- f )
    SWAP C@ SWAP - ;
    
: TEST-ALT-LOOKUP
    [CHAR] A C 4 LOOK-UP ASSERT( C EQUALS ) 
    [CHAR] C C 4 LOOK-UP ASSERT( C 2 CELLS + EQUALS ) 
    [CHAR] Z C 4 LOOK-UP ASSERT( FALSE EQUALS ) 
;

CREATE D 0 , 1 , 1 , 2 , 3 , 3 , 4 , 5 , 6 , 6 ,
: TEST-UNIQ 
    D 1 UNIQ ASSERT( 1 EQUALS )
    D 2 UNIQ ASSERT( 2 EQUALS )
    D 10 UNIQ ASSERT( 7 EQUALS )
    7 0 DO D I CELLS +  @ I ASSERT( EQUALS ) LOOP 
; 

: TESTS-QSORT    
    ['] < IS INF
    TEST-EQUALS
    TEST-MID
    TEST-EXCHANGE
    TEST-PARTITION
    TEST-QSORT
    TEST-SORT
    ['] IND-INF IS INF
    TEST-ALT-INF
    TEST-LOOKUP-IN-EMPTY-ARRAY
    TEST-LOOKUP-IN-1-ITEM-ARRAY
    TEST-LOOKUP-IN-2-ITEM-ARRAY
    TEST-LOOKUP-IN-3-ITEM-ARRAY
    TEST-LOOKUP-IN-4-ITEM-ARRAY
    ['] IND-CMP IS CMP
    TEST-ALT-LOOKUP
    ['] - IS CMP
    TEST-UNIQ 
;
